adf1 = ur.df(gdp,type="trend",lags=1)
summary(adf1)
# ADF test for GDP growth rate
growth <- na.omit(growth)
# Checking for significant lags
adf10 = ur.df(growth,type="trend",lags=10)
summary(adf10) # --> significant lag at 1
# Rerunning regression with one lag:
adf1 = ur.df(growth,type="trend",lags=1)
summary(adf1)
##############################################################################
# b) Box-Jenkins Approach for Real GDP (Growth) Model Selection
##############################################################################
acf(growth, main = "ACF of GDP Growth")
pacf(growth, main = "PACF of GDP Growth")
# Fit AR(p) models for p = 0..9, record AIC and BIC
pmax <- 9
n <- length(growth)
results <- data.frame(
p   = 0:pmax,
AIC = NA_real_,
BIC = NA_real_
)
for (p in 0:pmax) {
fit <- Arima(growth, order = c(p, 0, 0), include.mean = TRUE)
results$AIC[p + 1] <- fit$aic
k <- p + 1
results$BIC[p + 1] <- fit$aic + (2 * k - 2) * log(n)
}
print(results)
# 4. Identify which p minimizes AIC and BIC
best_aic_p <- results$p[which.min(results$AIC)]
best_bic_p <- results$p[which.min(results$BIC)]
cat("Best p by AIC:", best_aic_p, "\n")
cat("Best p by BIC:", best_bic_p, "\n")
# Check back with internal function from the forecast package
optorder = auto.arima(growth,d=0)
optorder # --> gives similar results
##############################################################################
# c) Estimate and Forecast the Chosen AR Models, Check Diagnostics
##############################################################################
# best model according to AIC
# Fit the chosen AR(p) model
ar_fit <- Arima(growth, order = c(best_aic_p, 0, 0), include.mean = TRUE)
# Display a summary
summary(ar_fit)
# Forecast h=8 quarters ahead (2 years), for example
ar_forecast <- forecast(ar_fit, h = 8)
plot(ar_forecast, main = paste("AR(", best_aic_p, ") Forecast of GDP Growth", sep=""))
# -------------------------
# Residual Diagnostics
# -------------------------
# 1) Standardized residuals
std_resid <- residuals(ar_fit) / sd(residuals(ar_fit))
plot(std_resid, type = "l", main = "Standardized Residuals: AR(2)")
abline(h = 0, col = "red")
# 2) ACF/PACF of residuals
acf(std_resid, main = "ACF of Standardized Residuals: AR(2)")
pacf(std_resid, main = "PACF of Standardized Residuals: AR(2)")
# 3) Ljung-Box test for autocorrelation
Box.test(std_resid, lag = 12, type = "Ljung-Box")
# 4) Shapiro-Wilk test for normality (small samples)
shapiro.test(std_resid)
# 5) Test for heteroskedasticity (Breusch-Pagan test)
bp_test_aic <- bptest(ar_fit$residuals ~ fitted(ar_fit))
print("Breusch-Pagan test for heteroskedasticity (AIC model):")
print(bp_test_aic)
############################################
# best model according to BIC
# Fit the chosen AR(p) model
ar_fit_bic <- Arima(growth, order = c(best_bic_p, 0, 0), include.mean = TRUE)
# Display a summary
summary(ar_fit_bic)
# Forecast h=8 quarters ahead (2 years), for example
ar_forecast_bic <- forecast(ar_fit_bic, h = 8)
plot(ar_forecast_bic, main = paste("AR(", best_bic_p, ") Forecast of GDP Growth", sep=""))
# -------------------------
# Residual Diagnostics
# -------------------------
# 1) Standardized residuals
std_resid_bic <- residuals(ar_fit_bic) / sd(residuals(ar_fit_bic))
plot(std_resid_bic, type = "l", main = "Standardized Residuals: AR(1)")
abline(h = 0, col = "red")
# 2) ACF/PACF of residuals
acf(std_resid_bic, main = "ACF of Standardized Residuals: AR(1)")
pacf(std_resid_bic, main = "PACF of Standardized Residuals: AR(1)")
# 3) Ljung-Box test for autocorrelation
Box.test(std_resid_bic, lag = 12, type = "Ljung-Box")
# 4) Shapiro-Wilk test for normality (small samples)
shapiro.test(std_resid_bic)
# 5) Test for heteroskedasticity (Breusch-Pagan test)
bp_test_bic <- bptest(ar_fit_bic$residuals ~ fitted(ar_fit_bic))
print("Breusch-Pagan test for heteroskedasticity (BIC model):")
print(bp_test_bic)
##############################################################################
# d) Use the Growth Rate of Real GDP from 1972Q2â€“2007Q4 and Estimate ARIMA
##############################################################################
growth_vec <- as.numeric(growth)
growth_ts <- ts(
growth_vec,
start = c(1970, 1), # year, quarter
frequency = 4         # quarterly
)
growth_sub <- window(growth_ts, start = c(1972, 2), end = c(2007, 4))
head(growth_sub)
ar2_model <- Arima(growth_sub, order = c(2, 0, 0))
summary(ar2_model)
# Forecast h=8 quarters ahead (2 years)
ar_forecast_2 <- forecast(ar2_model, h = 8)
# Create forecast plot
plot(ar_forecast_2, main = "AR(2) 2-Year GDP Growth Forecast",
xlab = "Year", ylab = "GDP Growth Rate", ylim = c(-3, 2))
actual_forecast_period <- window(growth_ts,
start = c(2008, 1),
end = c(2009, 4))
lines(actual_forecast_period, col = "red", lwd = 2)
legend("bottomleft",
legend = c("Forecast", "Actual"),
col = c("blue", "red"),
lty = 1,
lwd = 2,
bty = "n")
getwd()
setwd("/Users/MaximilianDroschl/Master/FS25/FinancialVolatility/Project/VolatilityModelling")
library("ggfortify")
library("moments")
library(ggplot2)
library(readxl)
library(zoo)
library(xts)
library(gridExtra)
library(rugarch)
library(quantmod)
library(sandwich)
library(lmtest)
library(stringr)
library(readr)
library(dplyr)
library(lubridate)
library(TTR)
library(MSGARCH)
set.seed(42) # for filtered hist. sim.
# ------------------------------
# Returns for Model fitting
# ------------------------------
# Load processed data
btc_full <- read.csv("data/btc_full.csv")
btc_full <- btc_full %>%
rename(`Open Time` = `Open.Time`) %>%
mutate(`Open Time` = ymd_hms(`Open Time`))
eth_full <- read.csv("data/eth_full.csv")
eth_full <- eth_full %>%
rename(`Open Time` = `Open.Time`) %>%
mutate(`Open Time` = ymd_hms(`Open Time`))
# Define split date
split_date <- ymd("2023-10-31")
# Split data
btc_train <- btc_full %>% filter(`Open Time` <= split_date)
btc_test  <- btc_full %>% filter(`Open Time` > split_date)
eth_train <- eth_full %>% filter(`Open Time` <= split_date)
eth_test  <- eth_full %>% filter(`Open Time` > split_date)
# Helper function for returns at different frequencies
aggregate_returns <- function(df, time_col, freq) {
df <- df %>%
mutate(Time = lubridate::floor_date(!!sym(time_col), unit = freq)) %>%
group_by(Time) %>%
summarise(Close = dplyr::last(Close[!is.na(Close)]), .groups = "drop") %>%
drop_na()
ret <- TTR::ROC(df$Close, type = "discrete")[-1]
df_ret <- data.frame(Time = df$Time[-1], Return = ret)
return(df_ret)
}
# Frequencies to compute
frequencies <- c("day", "6 hours", "hour")
# Compute for BTC and ETH, full / train / test
returns_model_fitting <- list(
btc_full = lapply(frequencies, function(f) aggregate_returns(btc_full, "Open Time", f)),
btc_train = lapply(frequencies, function(f) aggregate_returns(btc_train, "Open Time", f)),
btc_test = lapply(frequencies, function(f) aggregate_returns(btc_test, "Open Time", f)),
eth_full = lapply(frequencies, function(f) aggregate_returns(eth_full, "Open Time", f)),
eth_train = lapply(frequencies, function(f) aggregate_returns(eth_train, "Open Time", f)),
eth_test = lapply(frequencies, function(f) aggregate_returns(eth_test, "Open Time", f))
)
library(tidyr)
# Compute for BTC and ETH, full / train / test
returns_model_fitting <- list(
btc_full = lapply(frequencies, function(f) aggregate_returns(btc_full, "Open Time", f)),
btc_train = lapply(frequencies, function(f) aggregate_returns(btc_train, "Open Time", f)),
btc_test = lapply(frequencies, function(f) aggregate_returns(btc_test, "Open Time", f)),
eth_full = lapply(frequencies, function(f) aggregate_returns(eth_full, "Open Time", f)),
eth_train = lapply(frequencies, function(f) aggregate_returns(eth_train, "Open Time", f)),
eth_test = lapply(frequencies, function(f) aggregate_returns(eth_test, "Open Time", f))
)
names(returns_model_fitting$btc_full) <- frequencies
names(returns_model_fitting$btc_train) <- frequencies
names(returns_model_fitting$btc_test) <- frequencies
names(returns_model_fitting$eth_full) <- frequencies
names(returns_model_fitting$eth_train) <- frequencies
names(returns_model_fitting$eth_test) <- frequencies
# Select asset, select frequency, select, subset (train, test, full sample)
ret <- returns_model_fitting$eth_train$day
ret <- as.xts(ret)
max_p <- 1
max_q <- 1
max_r <- 3
# Specify a two-regime sGARCH model with Student-t errors
spec <- CreateSpec(
variance.spec = list(model = "eGARCH"),
distribution.spec = list(distribution = "std"),
switch.spec = list(do.mix = FALSE, K = 2)  # 2 regimes, not a mixture model
)
# Fitting conditional mean
ar_fit <- arima(ret, order = c(1, 0, 0), include.mean = TRUE)
ar_resid <- residuals(ar_fit)
# Fitting conditional variance model
fit <- FitML(spec = spec, data = ar_resid)
# Params and matrix:
fit
# ------------------------------
# MS GARCH Fitting
# ------------------------------
ret <- returns_model_fitting$btc_train$day
ret <- as.xts(ret)
# Specify a two-regime sGARCH model with Student-t errors
spec <- CreateSpec(
variance.spec = list(model = "eGARCH"),
distribution.spec = list(distribution = "std"),
switch.spec = list(do.mix = FALSE, K = 2)  # 2 regimes, not a mixture model
)
# Fitting conditional mean
ar_fit <- arima(ret, order = c(1, 0, 0), include.mean = TRUE)
ar_resid <- residuals(ar_fit)
# Fitting conditional variance model
fit <- FitML(spec = spec, data = ar_resid)
# Params and matrix:
fit
# Specify a two-regime sGARCH model with Student-t errors
spec <- CreateSpec(
variance.spec = list(model = "sGARCH"),
distribution.spec = list(distribution = "std"),
switch.spec = list(do.mix = FALSE, K = 2)  # 2 regimes, not a mixture model
)
# Fitting conditional mean
ar_fit <- arima(ret, order = c(1, 0, 0), include.mean = TRUE)
ar_resid <- residuals(ar_fit)
# Fitting conditional variance model
fit <- FitML(spec = spec, data = ar_resid)
# Params and matrix:
fit
ret <- returns_model_fitting$btc_train$day
ret <- as.xts(ret)
# Specify a two-regime sGARCH model with Student-t errors
spec <- CreateSpec(
variance.spec = list(model = "eGARCH"),
distribution.spec = list(distribution = "std"),
switch.spec = list(do.mix = FALSE, K = 2)  # 2 regimes, not a mixture model
)
# Fitting conditional mean
ar_fit <- arima(ret, order = c(1, 0, 0), include.mean = TRUE)
ar_resid <- residuals(ar_fit)
# Fitting conditional variance model
fit <- FitML(spec = spec, data = ar_resid)
# Params and matrix:
fit
# ------------------------------
# Rolling 1-step-ahead MS-eGARCH Forecasts (residuals from AR(1))
# ------------------------------
ret <- returns_model_fitting$btc_train$day
ret <- as.xts(ret)
split_date <- as.Date("2023-10-31")
# Filter index of first prediction day (t+1)
start_index <- which(index(ret) > split_date)[1]
# Initialize forecast storage
forecast_dates <- index(ret)[start_index:length(ret)]
forecast_values <- numeric(length(forecast_dates))
# Define MS-eGARCH(1,1) specification with 2 regimes
spec <- CreateSpec(
variance.spec = list(model = "eGARCH"),
distribution.spec = list(distribution = "std"),
switch.spec = list(K = 2, do.mix = FALSE)
)
# ------------------------------
ret <- returns_model_fitting$btc_train$day
ret <- as.xts(ret)
length(ret)
split_date <- as.Date("2023-10-31")
# Filter index of first prediction day (t+1)
start_index <- which(index(ret) > split_date)[1]
# Initialize forecast storage
forecast_dates <- index(ret)[start_index:length(ret)]
start_index
# Filter index of first prediction day (t+1)
start_index <- which(index(ret) > split_date)[1]
start_index
index(ret) > split_date
which(index(ret) > split_date)
ret <- returns_model_fitting$btc_train$day
ret <- as.xts(ret)
split_date <- as.Date("2023-10-31")
# Filter index of first prediction day (t+1)
start_index <- which(index(ret) > split_date)[1]
# Initialize forecast storage
forecast_dates <- index(ret)[start_index:length(ret)]
start_index
range(index(ret))
# ------------------------------
# Rolling 1-step-ahead MS-eGARCH Forecasts (residuals from AR(1))
# ------------------------------
ret <- returns_model_fitting$btc_full$day
ret <- as.xts(ret)
split_date <- as.Date("2023-10-31")
# Filter index of first prediction day (t+1)
start_index <- which(index(ret) > split_date)[1]
# Initialize forecast storage
forecast_dates <- index(ret)[start_index:length(ret)]
forecast_values <- numeric(length(forecast_dates))
# Define MS-eGARCH(1,1) specification with 2 regimes
spec <- CreateSpec(
variance.spec = list(model = "eGARCH"),
distribution.spec = list(distribution = "std"),
switch.spec = list(K = 2, do.mix = FALSE)
)
# Initialize storage
sigma <- numeric(length(forecast_dates))
# Rolling forecast loop
# seq_along(forecast_dates)
for (i in 1:5) {
idx <- start_index + i - 1
ret_window_xts <- ret[1:(idx - 1)]  # subset xts
ret_window <- as.numeric(ret_window_xts)
# Step 1: Fit AR(1) with intercept to mean
ar_fit <- tryCatch(arima(ret_window, order = c(1, 0, 0), include.mean = TRUE), error = function(e) NULL)
if (!is.null(ar_fit)) {
ar_resid <- residuals(ar_fit)
# Step 2: Fit MS-eGARCH to residuals
fit <- tryCatch(FitML(spec = spec, data = ar_resid), error = function(e) NULL)
if (!is.null(fit)) {
fc <- predict(fit, nahead = 1, do.return.draw = FALSE)
sigma[i] <- as.numeric(fc$vol[1])
} else {
sigma[i] <- NA
}
} else {
sigma[i] <- NA
}
}
# Create output
msGarch_forecasts <- data.frame(
Date = forecast_dates,
Sigma = sigma
)
print(head(msGarch_forecasts))
ret <- returns_model_fitting$btc_train$day
ret <- as.xts(ret)
# Specify a two-regime sGARCH model with Student-t errors
spec <- CreateSpec(
variance.spec = list(model = "eGARCH"),
distribution.spec = list(distribution = "std"),
switch.spec = list(do.mix = FALSE, K = 2)  # 2 regimes, not a mixture model
)
# Fitting conditional mean
ar_fit <- arima(ret, order = c(1, 0, 0), include.mean = TRUE)
ar_resid <- residuals(ar_fit)
# Fitting conditional variance model
fit <- FitML(spec = spec, data = ar_resid)
fc <- predict(fit, nahead = 1, do.return.draw = FALSE)
fc
fit$par
ret <- returns_model_fitting$btc_train$day
ret <- as.xts(ret)
ret <- returns_model_fitting$btc_full$day
ret <- as.xts(ret)
split_date <- as.Date("2023-10-31")
# Filter index of first prediction day (t+1)
start_index <- which(index(ret) > split_date)[1]
# Initialize forecast storage
forecast_dates <- index(ret)[start_index:length(ret)]
forecast_values <- numeric(length(forecast_dates))
# Define MS-eGARCH(1,1) specification with 2 regimes
spec <- CreateSpec(
variance.spec = list(model = "eGARCH"),
distribution.spec = list(distribution = "std"),
switch.spec = list(K = 2, do.mix = FALSE)
)
# Initialize storage
sigma <- numeric(length(forecast_dates))
for (i in seq_along(forecast_dates)) {
idx <- start_index + i - 1
ret_window_xts <- ret[1:(idx - 1)]  # subset xts
ret_window <- as.numeric(ret_window_xts)
# Step 1: Fit AR(1) with intercept to mean
ar_fit <- tryCatch(arima(ret_window, order = c(1, 0, 0), include.mean = TRUE), error = function(e) NULL)
if (!is.null(ar_fit)) {
ar_resid <- residuals(ar_fit)
# Step 2: Fit MS-eGARCH to residuals
fit <- tryCatch(FitML(spec = spec, data = ar_resid), error = function(e) NULL)
if (!is.null(fit)) {
fc <- predict(fit, nahead = 1, do.return.draw = FALSE)
sigma[i] <- as.numeric(fc$vol[1])
} else {
sigma[i] <- NA
}
} else {
sigma[i] <- NA
}
}
msGarch_forecasts <- data.frame(
Date = forecast_dates,
Sigma = sigma
)
print(head(msGarch_forecasts))
ret <- returns_model_fitting$btc_train$day
ret <- as.xts(ret)
# Specify a two-regime sGARCH model with Student-t errors
spec <- CreateSpec(
variance.spec = list(model = "eGARCH"),
distribution.spec = list(distribution = "std"),
switch.spec = list(do.mix = FALSE, K = 2)  # 2 regimes, not a mixture model
)
# Fitting conditional mean
ar_fit <- arima(ret, order = c(1, 0, 0), include.mean = TRUE)
ar_resid <- residuals(ar_fit)
# Fitting conditional variance model
fit <- FitML(spec = spec, data = ar_resid)
fc <- predict(fit, nahead = 1, do.return.draw = FALSE)
fc
ret_train <- returns_model_fitting$btc_full$day
ret_train <- as.xts(ret_train)
train_window <- ret_train[1:(start_index - 1)]
train_window <- as.numeric(train_window)
ar_fit <- arima(train_window, order = c(1, 0, 0), include.mean = TRUE)
ar_resid <- residuals(ar_fit)
fit <- FitML(spec = spec, data = ar_resid)
fc <- predict(fit, nahead = 1, do.return.draw = FALSE)
fc
Volatility(fit)
UncVol(fit)
State(fit)
head(State(fit))
plot(fc)
ret <- returns_model_fitting$btc_train$day
ret <- as.xts(ret)
# Specify a two-regime sGARCH model with Student-t errors
spec <- CreateSpec(
variance.spec = list(model = "eGARCH"),
distribution.spec = list(distribution = "std"),
switch.spec = list(do.mix = FALSE, K = 2)  # 2 regimes, not a mixture model
)
# Fitting conditional mean
ar_fit <- arima(ret, order = c(1, 0, 0), include.mean = TRUE)
ar_resid <- residuals(ar_fit)
# Fitting conditional variance model
fit <- FitML(spec = spec, data = ar_resid)
fc <- predict(fit, nahead = 1, do.return.draw = FALSE)
fc <- predict(fit, nahead = 100, do.return.draw = FALSE)
plot(fc)
ret <- returns_model_fitting$btc_train$`6 hours`
ret <- as.xts(ret)
# Simple example using an ARMA (1,0) GARCH (1,1) for the BTC return series
model <- ugarchspec(variance.model = list(model = "eGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)),
distribution.model = "std")
fit <- ugarchfit(spec = model, data = ret)
# Params
print(fit)
model <- ugarchspec(variance.model = list(model = "GJRGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)),
distribution.model = "std")
ret <- returns_model_fitting$btc_train$`6 hours`
ret <- as.xts(ret)
# Simple example using an ARMA (1,0) GARCH (1,1) for the BTC return series
model <- ugarchspec(variance.model = list(model = "GJRGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)),
distribution.model = "std")
# Simple example using an ARMA (1,0) GARCH (1,1) for the BTC return series
model <- ugarchspec(variance.model = list(model = "gjrGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)),
distribution.model = "std")
fit <- ugarchfit(spec = model, data = ret)
# Params
print(fit)
plot(fit@fit$z)
qqplot(qt(ppoints(length(resid_std)), df = df), resid_std,
main = "Q-Q Plot vs Student-t Distribution",
xlab = "Theoretical Quantiles (t-distribution)",
ylab = "Standardized Residuals")
# Output plots: 2x2 grid
resid_std <- fit@fit$z
df <- coef(fit)["shape"]
plot(fit@fit$z)
qqplot(qt(ppoints(length(resid_std)), df = df), resid_std,
main = "Q-Q Plot vs Student-t Distribution",
xlab = "Theoretical Quantiles (t-distribution)",
ylab = "Standardized Residuals")
# Select frequ and asset
ret <- returns_model_fitting$eth_train$`6 hours`
ret <- as.xts(ret)
# Simple example using an ARMA (1,0) GARCH (1,1) for the BTC return series
model <- ugarchspec(variance.model = list(model = "gjrGARCH", garchOrder = c(2, 2)),
mean.model = list(armaOrder = c(1, 0)),
distribution.model = "std")
fit <- ugarchfit(spec = model, data = ret)
# Params
print(fit)
# Output plots: 2x2 grid
resid_std <- fit@fit$z
df <- coef(fit)["shape"]
plot(fit@fit$z)
qqplot(qt(ppoints(length(resid_std)), df = df), resid_std,
main = "Q-Q Plot vs Student-t Distribution",
xlab = "Theoretical Quantiles (t-distribution)",
ylab = "Standardized Residuals")
