bic_matrix[p + 1, q + 1] <- bic
llh_matrix[p + 1, q + 1] <- ll
order <- paste("ARMA-GARCH(", p, ",", q, ";", r, ",", s, ")", sep = "")
if (aic < best_aic) {
best_model <- fit
best_aic <- aic
best_bic <- bic
best_ll <- ll
best_order <- order
jb_val <- jarque.bera.test(best_model@fit$z)$statistic
bp_val <- Box.test(best_model@fit$z^2, lag = 20, type = "Box-Pierce")$p.value
ml_val <- Box.test(best_model@fit$z^2, lag = 30, type = "Ljung-Box")$p.value
lb_val <- Box.test(best_model@fit$z, lag = 30, type = "Ljung-Box")$p.value
}
}
}
}
}
}
aic_matrices[[col]] <- aic_matrix
bic_matrices[[col]] <- bic_matrix
llh_matrices[[col]] <- llh_matrix
best_models[[col]] <- best_model
results_table <- rbind(results_table, data.frame(
Series = col,
LLH = best_ll,
AIC = best_aic,
BIC = best_bic,
Model = best_order
))
test_table <- rbind(test_table, data.frame(
Series = col,
JB = jb_val,
BP = bp_val,
ML = ml_val,
LB = lb_val
))
}
results_table
aic_matrix
library("ggfortify")
library("moments")
library(ggplot2)
library(readxl)
library(zoo)
library(xts)
library(gridExtra)
library(rugarch)
library(quantmod)
library(sandwich)
library(lmtest)
library(stringr)
ret <- read.csv("data/train_returns.csv")
ret$Date <- as.Date(ret$Date)
model <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 0)),
mean.model = list(armaOrder = c(1, 0)),
distribution.model = "std")
fit <- ugarchfit(spec = model, data = ret[, "BTC"])
ret <- na.omit(xts(ret[, c("BTC", "ETH")], order.by = ret$Date))
max_p <- 3
max_q <- 3
max_r <- 3
max_s <- 3
plot_list <- list()
results_table <- data.frame(
Series = character(),
LLH = numeric(),
AIC = numeric(),
BIC = numeric(),
Model = character(),
stringsAsFactors = FALSE
)
test_table <- data.frame(
Series = character(),
JB = numeric(),
BP = numeric(),
ML = numeric(),
LB = numeric(),
stringsAsFactors = FALSE
)
aic_matrices <- list()
bic_matrices <- list()
llh_matrices <- list()
best_models <- list()
for (col in colnames(ret)) {
series <- ret[, col]
best_model <- NULL
best_aic <- Inf
best_bic <- Inf
best_ll <- -Inf
best_order <- NULL
aic_matrix <- matrix(NA, nrow = max_p + 1, ncol = max_q + 1)
bic_matrix <- matrix(NA, nrow = max_p + 1, ncol = max_q + 1)
llh_matrix <- matrix(NA, nrow = max_p + 1, ncol = max_q + 1)
jb_val <- NA
bp_val <- NA
ml_val <- NA
lb_val <- NA
for (p in 0:max_p) {
for (q in 0:max_q) {
for (r in 0:max_r) {
for (s in 0:max_s) {
if (r == 0 && s == 0) {
next
}
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(r, s)),
mean.model = list(armaOrder = c(p, q)),
distribution.model = "std")
fit <- tryCatch(ugarchfit(spec, series), error = function(e) NULL)
if (!is.null(fit)) {
aic <- -2*fit@fit$LLH + 2*(r+s+p+q+1)
bic <- -2*fit@fit$LLH + (r+s+p+q+1)*log(length(series))
ll <- fit@fit$LLH
aic_matrix[p + 1, q + 1] <- aic
bic_matrix[p + 1, q + 1] <- bic
llh_matrix[p + 1, q + 1] <- ll
order <- paste("ARMA-GARCH(", p, ",", q, ";", r, ",", s, ")", sep = "")
if (aic < best_aic) {
best_model <- fit
best_aic <- aic
best_bic <- bic
best_ll <- ll
best_order <- order
jb_val <- jarque.bera.test(best_model@fit$z)$statistic
bp_val <- Box.test(best_model@fit$z^2, lag = 20, type = "Box-Pierce")$p.value
ml_val <- Box.test(best_model@fit$z^2, lag = 30, type = "Ljung-Box")$p.value
lb_val <- Box.test(best_model@fit$z, lag = 30, type = "Ljung-Box")$p.value
}
}
}
}
}
}
aic_matrices[[col]] <- aic_matrix
bic_matrices[[col]] <- bic_matrix
llh_matrices[[col]] <- llh_matrix
best_models[[col]] <- best_model
results_table <- rbind(results_table, data.frame(
Series = col,
LLH = best_ll,
AIC = best_aic,
BIC = best_bic,
Model = best_order
))
test_table <- rbind(test_table, data.frame(
Series = col,
JB = jb_val,
BP = bp_val,
ML = ml_val,
LB = lb_val
))
}
View(aic_matrix)
library("ggfortify")
library("moments")
library(ggplot2)
library(readxl)
library(zoo)
library(xts)
library(gridExtra)
library(rugarch)
library(quantmod)
library(sandwich)
library(lmtest)
library(stringr)
ret <- read.csv("data/train_returns.csv")
ret$Date <- as.Date(ret$Date)
model <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 0)),
mean.model = list(armaOrder = c(1, 0)),
distribution.model = "std")
fit <- ugarchfit(spec = model, data = ret[, "BTC"])
ret <- na.omit(xts(ret[, c("BTC", "ETH")], order.by = ret$Date))
max_p <- 2
max_q <- 2
max_r <- 2
max_s <- 2
plot_list <- list()
results_table <- data.frame(
Series = character(),
LLH = numeric(),
AIC = numeric(),
BIC = numeric(),
Model = character(),
stringsAsFactors = FALSE
)
test_table <- data.frame(
Series = character(),
JB = numeric(),
BP = numeric(),
ML = numeric(),
LB = numeric(),
stringsAsFactors = FALSE
)
aic_matrices <- list()
bic_matrices <- list()
llh_matrices <- list()
best_models <- list()
for (col in colnames(ret)) {
series <- ret[, col]
best_model <- NULL
best_aic <- Inf
best_bic <- Inf
best_ll <- -Inf
best_order <- NULL
aic_matrix <- matrix(NA, nrow = max_p + 1, ncol = max_q + 1)
bic_matrix <- matrix(NA, nrow = max_p + 1, ncol = max_q + 1)
llh_matrix <- matrix(NA, nrow = max_p + 1, ncol = max_q + 1)
jb_val <- NA
bp_val <- NA
ml_val <- NA
lb_val <- NA
for (p in 0:max_p) {
for (q in 0:max_q) {
for (r in 0:max_r) {
for (s in 0:max_s) {
if (r == 0 && s == 0) {
next
}
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(r, s)),
mean.model = list(armaOrder = c(p, q)),
distribution.model = "std")
fit <- tryCatch(ugarchfit(spec, series), error = function(e) NULL)
if (!is.null(fit)) {
aic <- -2*fit@fit$LLH + 2*(r+s+p+q+1)
bic <- -2*fit@fit$LLH + (r+s+p+q+1)*log(length(series))
ll <- fit@fit$LLH
aic_matrix[p + 1, q + 1] <- aic
bic_matrix[p + 1, q + 1] <- bic
llh_matrix[p + 1, q + 1] <- ll
order <- paste("ARMA-GARCH(", p, ",", q, ";", r, ",", s, ")", sep = "")
if (aic < best_aic) {
best_model <- fit
best_aic <- aic
best_bic <- bic
best_ll <- ll
best_order <- order
jb_val <- jarque.bera.test(best_model@fit$z)$statistic
bp_val <- Box.test(best_model@fit$z^2, lag = 20, type = "Box-Pierce")$p.value
ml_val <- Box.test(best_model@fit$z^2, lag = 30, type = "Ljung-Box")$p.value
lb_val <- Box.test(best_model@fit$z, lag = 30, type = "Ljung-Box")$p.value
}
}
}
}
}
}
aic_matrices[[col]] <- aic_matrix
bic_matrices[[col]] <- bic_matrix
llh_matrices[[col]] <- llh_matrix
best_models[[col]] <- best_model
results_table <- rbind(results_table, data.frame(
Series = col,
LLH = best_ll,
AIC = best_aic,
BIC = best_bic,
Model = best_order
))
test_table <- rbind(test_table, data.frame(
Series = col,
JB = jb_val,
BP = bp_val,
ML = ml_val,
LB = lb_val
))
}
View(aic_matrix)
results_table
library("ggfortify")
library("moments")
library(ggplot2)
library(readxl)
library(zoo)
library(xts)
library(gridExtra)
library(rugarch)
library(quantmod)
library(sandwich)
library(lmtest)
library(stringr)
ret <- read.csv("data/train_returns.csv")
ret$Date <- as.Date(ret$Date)
model <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 0)),
mean.model = list(armaOrder = c(1, 0)),
distribution.model = "std")
fit <- ugarchfit(spec = model, data = ret[, "BTC"])
ret <- na.omit(xts(ret[, c("BTC", "ETH")], order.by = ret$Date))
max_p <- 1
max_q <- 1
max_r <- 3
max_s <- 3
plot_list <- list()
results_table <- data.frame(
Series = character(),
LLH = numeric(),
AIC = numeric(),
BIC = numeric(),
Model = character(),
stringsAsFactors = FALSE
)
test_table <- data.frame(
Series = character(),
JB = numeric(),
BP = numeric(),
ML = numeric(),
LB = numeric(),
stringsAsFactors = FALSE
)
aic_matrices <- list()
bic_matrices <- list()
llh_matrices <- list()
best_models <- list()
for (col in colnames(ret)) {
series <- ret[, col]
best_model <- NULL
best_aic <- Inf
best_bic <- Inf
best_ll <- -Inf
best_order <- NULL
aic_matrix <- matrix(NA, nrow = max_p + 1, ncol = max_q + 1)
bic_matrix <- matrix(NA, nrow = max_p + 1, ncol = max_q + 1)
llh_matrix <- matrix(NA, nrow = max_p + 1, ncol = max_q + 1)
jb_val <- NA
bp_val <- NA
ml_val <- NA
lb_val <- NA
for (p in 0:max_p) {
for (q in 0:max_q) {
for (r in 0:max_r) {
for (s in 0:max_s) {
if (r == 0 && s == 0) {
next
}
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(r, s)),
mean.model = list(armaOrder = c(p, q)),
distribution.model = "std")
fit <- tryCatch(ugarchfit(spec, series), error = function(e) NULL)
if (!is.null(fit)) {
aic <- -2*fit@fit$LLH + 2*(r+s+p+q+1)
bic <- -2*fit@fit$LLH + (r+s+p+q+1)*log(length(series))
ll <- fit@fit$LLH
aic_matrix[p + 1, q + 1] <- aic
bic_matrix[p + 1, q + 1] <- bic
llh_matrix[p + 1, q + 1] <- ll
order <- paste("ARMA-GARCH(", p, ",", q, ";", r, ",", s, ")", sep = "")
if (aic < best_aic) {
best_model <- fit
best_aic <- aic
best_bic <- bic
best_ll <- ll
best_order <- order
jb_val <- jarque.bera.test(best_model@fit$z)$statistic
bp_val <- Box.test(best_model@fit$z^2, lag = 20, type = "Box-Pierce")$p.value
ml_val <- Box.test(best_model@fit$z^2, lag = 30, type = "Ljung-Box")$p.value
lb_val <- Box.test(best_model@fit$z, lag = 30, type = "Ljung-Box")$p.value
}
}
}
}
}
}
aic_matrices[[col]] <- aic_matrix
bic_matrices[[col]] <- bic_matrix
llh_matrices[[col]] <- llh_matrix
best_models[[col]] <- best_model
results_table <- rbind(results_table, data.frame(
Series = col,
LLH = best_ll,
AIC = best_aic,
BIC = best_bic,
Model = best_order
))
test_table <- rbind(test_table, data.frame(
Series = col,
JB = jb_val,
BP = bp_val,
ML = ml_val,
LB = lb_val
))
}
results_table
best_fit <- best_models[["BTC"]]
if (!is.null(best_fit)) {
coef(best_fit)
plot(best_fit, which = 2)
plot(best_fit, which = 3)
} else {
print("No valid model was fit for BTC.")
}
results_table
library(xts)
library(rugarch)
library(rmgarch)
library(xtable)
library(ggplot2)
ret <- read.csv("data/train_returns.csv")
ret$Date <- as.Date(ret$Date)
fit_function <- function(series1, series2) {
uspec1 <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)), distribution.model = "std")
uspec2 <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)), distribution.model = "std")
uspec_list <- multispec(list(uspec1, uspec2))
dcc_spec <- dccspec(uspec = uspec_list, dccOrder = c(1, 1), distribution = "mvt")
combined_series <- cbind(series1, series2)
dcc_fit <- dccfit(dcc_spec, data = combined_series)
param_names <- rownames(dcc_fit@mfit$matcoef)
values <- dcc_fit@mfit$matcoef[, 1]
std_errors <- dcc_fit@mfit$matcoef[, 2]
params <- mapply(function(val, err)
paste0(round(val, 3), " (", round(err, 3), ")"),
values, std_errors, SIMPLIFY = FALSE)
names(params) <- param_names
# Calculate BIC, AIC, and other statistics
k <- 3 #MV Norm
#k <- 4 #MV Student
params$llh <- round(dcc_fit@mfit$llh, 3)
params$aic <- round(-2 * (dcc_fit@mfit$llh) + 2 * k, 3)
params$bic <- round(-2 * (dcc_fit@mfit$llh) + log(length(series1) + length(series2)) * k, 3)
return(params)
}
length(ret)
ret$Date <- as.Date(ret$Date)
head(ret)
results <- list()
col_names <- colnames(ret)
for (i in 1:(ncol(ret) - 1)) {
for (j in (i + 1):ncol(ret)) {
series1 <- ret[, i]
series2 <- ret[, j]
fit_name <- paste(col_names[i], col_names[j], sep = " - ")
results[[fit_name]] <- fit_function(series1, series2)
}
}
results_df <- do.call(rbind, results)
results_df
col_names <- colnames(ret)
col_names
str(ret)
ret <- read.csv("data/train_returns.csv")
ret$Date <- as.Date(ret$Date)
ret <- na.omit(xts(ret[, c("BTC", "ETH")], order.by = ret$Date))
# Simple example using an ARMA (1,0) GARCH (1,1) for the BTC return series
model <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)),
distribution.model = "std")
fit <- ugarchfit(spec = model, data = ret[, "BTC"])
fit
fit@model
library(xts)
library(rugarch)
library(rmgarch)
library(xtable)
library(ggplot2)
library(zoo)
ret <- na.omit(read.zoo("data/train_returns.csv", header = TRUE, sep = ",", format = "%Y-%m-%d", index.column = "Date"))
ret <- as.xts(ret)
fit_function <- function(series1, series2) {
uspec1 <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)), distribution.model = "std")
uspec2 <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)), distribution.model = "std")
uspec_list <- multispec(list(uspec1, uspec2))
dcc_spec <- dccspec(uspec = uspec_list, dccOrder = c(1, 1), distribution = "mvt")
combined_series <- cbind(series1, series2)
dcc_fit <- dccfit(dcc_spec, data = combined_series)
param_names <- rownames(dcc_fit@mfit$matcoef)
values <- dcc_fit@mfit$matcoef[, 1]
std_errors <- dcc_fit@mfit$matcoef[, 2]
params <- mapply(function(val, err)
paste0(round(val, 3), " (", round(err, 3), ")"),
values, std_errors, SIMPLIFY = FALSE)
names(params) <- param_names
# Calculate BIC, AIC, and other statistics
k <- 3 #MV Norm
#k <- 4 #MV Student
params$llh <- round(dcc_fit@mfit$llh, 3)
params$aic <- round(-2 * (dcc_fit@mfit$llh) + 2 * k, 3)
params$bic <- round(-2 * (dcc_fit@mfit$llh) + log(length(series1) + length(series2)) * k, 3)
return(params)
}
length(ret)
results <- list()
col_names <- colnames(ret)
for (i in 1:(ncol(ret) - 1)) {
for (j in (i + 1):ncol(ret)) {
series1 <- ret[, i]
series2 <- ret[, j]
fit_name <- paste(col_names[i], col_names[j], sep = " - ")
results[[fit_name]] <- fit_function(series1, series2)
}
}
results_df <- do.call(rbind, results)
results_df
volatility <- sigma(btc_eth_fit)
btc_eth_fit <- dccfit(
dccspec(
uspec = multispec(list(
ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)),
distribution.model = "std"),
ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)),
distribution.model = "std")
)),
dccOrder = c(1, 1),
distribution = "mvt"
),
data = ret[, c("BTC", "ETH")]
)
btc_eth_fit@mfit$cvar
sigma(btc_eth_fit)
rcor(btc_eth_fit)
